<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="dactyl://content/help.xsl"?>

<!DOCTYPE document SYSTEM "dactyl://cache/options.dtd">

<document
    name="options"
    title="&dactyl.appName; Options"
    xmlns="&xmlns.dactyl;"
    xmlns:html="&xmlns.html;">

<h1 tag="options">Options</h1>
<toc start="2"/>

<p>
    &dactyl.appName; has a number of internal variables and switches which can be set to
    achieve special effects. These options come in the following forms:
</p>

<dl dt="width: 10em;">
    <dt/><dd tag="boolean"/>
    <dt>boolean</dt>
    <dd>
        Can only be <hl key="Boolean">on</hl> (<ex>:set <a>option</a></ex>) or
        <hl key="Boolean">off</hl> (<ex>:set no<a>option</a></ex>)
    </dd>

    <dt>number</dt>        <dd>A numeric value</dd>
    <dt>string</dt>        <dd>A string value</dd>

    <dt/><dd tag="charlist"/>
    <dt>charlist</dt>
    <dd>A string containing a discrete set of distinct characters</dd>

    <dt/><dd tag="stringlist"/>
    <dt>stringlist</dt>
    <dd>
        A comma-separated list of strings. Any comma appearing within single
        or double quotes, or prefixed with a <tt>\</tt>, will not be treated
        as an item separator.
    </dd>

    <dt/><dd tag="stringmap"/>
    <dt>stringmap</dt>
    <dd>A comma-separated list of key-value pairs, e.g., <str delim="">key:val,foo:bar</str></dd>

    <dt/><dd tag="regexplist"/>
    <dt>regexplist</dt>
    <dd>
        A comma-separated list of regular expressions. Expressions may be
        prefixed with a <tt>!</tt>, in which case the match will be negated. A
        literal <tt>!</tt> at the beginning of the expression may be matched
        with <tt>[!]</tt> or by placing the regular expression in quotes.
        Generally, the first matching regular expression is used. Any comma
        appearing within single or double quotes, or prefixed with a
        <tt>\</tt>, will not be treated as an item separator.
    </dd>

    <dt/><dd tag="regexpmap"/>
    <dt>regexpmap</dt>
    <dd>
        A combination of a <t>stringmap</t> and a <t>regexplist</t>. Each key
        in the <a>key</a>:<a>value</a> pair is a regexp. If the regexp begins with a
        <tt>!</tt>, the sense of the match is negated, such that a non-matching
        expression will be considered a match and <html:i>vice versa</html:i>.
        The first <a>key</a> to match yields value.
    </dd>

    <dt>sitelist</dt> <dd tag="sitelist sitemap"/>
    <dt>sitemap</dt>
    <dd>
        Like <t>regexplist</t> and <t>regexpmap</t>, but the keys are
        <t>site-filters</t> rather than regular expressions.
    </dd>
</dl>

<p tag="macro-string">
    Some options may be given format strings containing macro replacements in
    the form of <tt>&lt;<a>name</a>></tt>. These tokens are replaced by
    the parameter <a>name</a> as specified in the relevant documentation.
    If the token is in the form <tt>&lt;q-<a>name</a>></tt>, the value of the
    parameter is automatically <link topic="quoting">quoted</link>. If it is in
    the form of <tt>&lt;e-<a>name</a>></tt>, its value is never shown but may be
    used to test whether the given parameter is empty.
</p>
<p>
    Array elements, such as in the <tt>&lt;args></tt> parameter
    of <ex>:command</ex> macros, may be accessed by appending
    <tt>[<a>n</a>]</tt>, where <a>n</a> is the one-based array
    index, to the macro name. The first argument of a command is
    therefore accessed with <tt>&lt;args[1]&gt;</tt>.
</p>
<p>
    Any substring enclosed by <em><tt>&lt;{</tt></em> and <em><tt>}></tt></em>
    is automatically elided if any of the contained macros aren't currently
    valid. A literal <em><tt>&lt;</tt></em> or <em><tt>></tt></em> character may
    be included with the special escape sequences <tt>&lt;lt></tt> or
    <tt>&lt;gt></tt> respectively.
</p>

<p style="text-align: left">
    For example, given the format string
    <str>&lt;{(cmd: &lt;column>) }>&lt;{line: &lt;line> }>&lt;file></str>,
    where <em>line</em>=<hl key="Number">32</hl> and
    <em>file</em>=<str delim="'">Lieder eines fahrenden Gesellen.txt</str>,
    the result is formatted as
    <str>line: 32 'Lieder eines fahrenden Gesellen.txt'</str>
</p>

<h2 tag="set-option E764">Setting options</h2>

<item>
    <tags>:set :se</tags>
    <spec>:se<oa>t</oa></spec>
    <description short="true">
        <p>Show all options which differ from their default values.</p>
    </description>
</item>

<item>
    <spec>:se<oa>t</oa> all</spec>
    <description short="true">
        <p>Show all options.</p>
    </description>
</item>

<item>
    <tags>E518 E519</tags>
    <spec>:se<oa>t</oa> <a>option</a>?</spec>
    <description>
        <p>Show value of <a>option</a>.</p>
    </description>
</item>

<item>
    <spec>:se<oa>t</oa> <a>option</a> <oa>…</oa></spec>
    <description>
        <p>
            For boolean options, turn them on. For all other types,
            show their values.
        </p>
    </description>
</item>

<item>
    <spec>:se<oa>t</oa> no<a>option</a> <oa>…</oa></spec>
    <description>
        <p>
            For boolean options, turn them off. For all other types,
            display an error.
        </p>
    </description>
</item>

<item>
    <spec>:se<oa>t</oa> <a>option</a>! <oa>…</oa></spec>
    <spec>:se<oa>t</oa> inv<a>option</a> <oa>…</oa></spec>
    <description>
        <p>
            For boolean options, invert their value. For all other types,
            display an error.
        </p>
    </description>
</item>

<item>
    <tags>:set!=</tags>
    <spec>:se<oa>t</oa> inv<a>option</a>=<a>value</a> <oa>…</oa></spec>
    <spec>:se<oa>t</oa> <a>option</a>!=<a>value</a> <oa>…</oa></spec>
    <description>
        <p>For list options, toggle the specified values.</p>

        <p style="text-align: left;">
            If the option is a list, the given values are toggled. Given,
            <se opt="opt" link="false"><str delim="">foo</str>,<str delim="">bar</str></se>
            then,
            <se opt="opt" op="!=" link="false"><str delim="">foo</str>,<str delim="">baz</str></se>
            has the same result as
            <se opt="opt" link="false"><str delim="">bar</str>,<str delim="">baz</str></se>
        </p>

        <p>
            This extends to string options in a natural way, e.g.,
            <se opt="stal" op="!="><str delim="">always</str>,<str delim="">never</str></se>
            toggles between the two values.
        </p>
    </description>
</item>

<item>
    <tags>:set-default</tags>
    <spec>:se<oa>t</oa> <a>option</a>&amp; <oa>…</oa></spec>
    <description>
        <p>Reset option to its default value.</p>
    </description>
</item>

<item>
    <tags>:set-default-all</tags>
    <spec>:se<oa>t</oa> all&amp;</spec>
    <description>
        <p>Set all options to their default value.</p>
    </description>
</item>

<item>
    <tags>:set-args E487 E521</tags>
    <spec>:se<oa>t</oa> <a>option</a>=<a>value</a> <oa>…</oa></spec>
    <description>
        <p>
            Set string or number option to <a>value</a>.
            For numeric options the value must be given in decimal.
            The old value can be inserted by typing <k name="Tab" mode="c"/>.
        </p>
    </description>
</item>

<item>
    <tags>:set+=</tags>
    <spec>:se<oa>t</oa> <a>option</a>+=<a>value</a> <oa>…</oa></spec>
    <description>
        <p>
            Add the <a>value</a> to a number option, or append the <a>value</a>
            to a string option.  When the option is a comma separated list, a
            comma is added, unless the value was empty. If the option is a list
            of flags, superfluous flags are removed.  When adding a flag that
            was already present the option value doesn't change.
        </p>
    </description>
</item>

<item>
    <tags>:set^=</tags>
    <spec>:se<oa>t</oa> <a>option</a>^=<a>value</a> <oa>…</oa></spec>
    <description>
        <p>
            Multiply the <a>value</a> to a number option, or prepend the
            <a>value</a> to a string option. When the option is a comma
            separated list, a comma is added, unless the value was empty.
        </p>
    </description>
</item>

<item>
    <tags>:set-=</tags>
    <spec>:se<oa>t</oa> <a>option</a>-=<a>value</a> <oa>…</oa></spec>
    <description>
        <p>
            Subtract the <a>value</a> from a number option, or remove the
            <a>value</a> from a string option if it is there. If the
            <a>value</a> is not found in a string option, there is no error or
            warning. When the option is a comma separated list, a comma is
            deleted, unless the option becomes empty. When the option is a list
            of flags, <a>value</a> must be exactly as they appear in the option.
            Remove flags one by one to avoid problems.
        </p>
    </description>
</item>

<item>
    <tags>:setlocal :setl</tags>
    <spec>:setl<oa>ocal</oa> …</spec>
    <description>
        <p>
            The same as <ex>:set</ex> command, but operates on current tab options
            only. See <ex>:set</ex> for details.
        </p>
    </description>
</item>

<item>
    <tags>:setglobal :setg</tags>
    <spec>:setg<oa>lobal</oa> …</spec>
    <description>
        <p>
            The same as <ex>:set</ex> command, but operates on global options only.
            See <ex>:set</ex> for details.
        </p>
    </description>
</item>

<p tag="expand-environment-var expand-env :set_env">
    Environment variables are expanded for path options like <o>cdpath</o> and
    <o>runtimepath</o>. The variable notation is <em>$VAR</em> (terminated by a non-word
    character) or <em>${VAR}</em>. <em>%VAR%</em> is also supported on Windows.
</p>

<h2 tag="&dactyl.host;-options preferences">Setting &dactyl.host; options</h2>

<p>&dactyl.host; options can be viewed and set with the following commands:</p>

<item>
    <tags>:pref :prefs :preferences</tags>
    <spec>:pref<oa>erences</oa></spec>
    <description>
        <p>
            Show the &dactyl.host; preferences dialog. You can change the browser
            preferences from this dialog. Be aware that not all &dactyl.host;
            preferences work, because &dactyl.appName; overrides some key bindings and
            changes &dactyl.host;'s GUI.
        </p>
    </description>
</item>

<item>
    <tags>:pref! :prefs! :preferences!</tags>
    <spec>:pref<oa>erences</oa>!</spec>
    <description>
        <p>
            Opens about:config in the current tab, where you can change advanced &dactyl.host;
            preferences.
        </p>
    </description>
</item>

<item>
    <tags>:set! :set-!</tags>
    <spec>:se<oa>t</oa>! …</spec>
    <description>
        <p>
            The same as <ex>:set</ex> but operates on &dactyl.host; preferences
            (those on the about:config page). See <ex>:set</ex> for operator
            details.
        </p>
        <note>
            The <em>no</em> and <em>inv</em> prefix operators are not available
            for setting preferences.
        </note>
    </description>
</item>

<p tag="overridden-preferences">
    &dactyl.appName; needs to set several &dactyl.host; preferences at
    startup in order to function properly. If this is unacceptable,
    they can be changed in your RC file with the <ex>:set!</ex>
    command, but beware of unexpected behavior. The affected
    preferences are:
</p>

<ul>
    <li><pref>accessibility.typeaheadfind</pref></li>
</ul>

<h2 tag="list-options">List of options</h2>

<item>
    <tags>'act' 'activate'</tags>
    <strut/>
    <spec>'activate' 'act'</spec>
    <type>&option.activate.type;</type>
    <default>addons,bookmarks,diverted,downloads,extoptions,
          help,homepage,quickmark,tabopen,paste</default>
    <description>
        <p>
            A list of items which, when opened in a new tab, are
            automatically focused. Available items:
        </p>

        <dl>
            <dt>all</dt>           <dd>Activate all items.</dd>
            <dt>addons</dt>        <dd><ex>:addo<oa>ns</oa></ex> command</dd>
            <dt>bookmarks</dt>     <dd>Tabs loaded from bookmarks</dd>
            <dt>diverted</dt>      <dd>Links with targets set to new tabs</dd>
            <dt>downloads</dt>     <dd><ex>:downl<oa>oads</oa></ex> command</dd>
            <dt>extoptions</dt>    <dd><ex>:exto<oa>ptions</oa></ex> command</dd>
            <dt>help</dt>          <dd><ex>:h<oa>elp</oa></ex> command</dd>
            <dt>homepage</dt>      <dd><k>gH</k> mapping</dd>
            <dt>links</dt>         <dd>Middle- or Control-clicked links</dd>
            <dt>quickmark</dt>     <dd><k>go</k> and <k>gn</k> mappings</dd>
            <dt>tabopen</dt>       <dd><ex>:tabopen<oa>!</oa></ex> command</dd>
            <dt>paste</dt>         <dd><k>P</k> and <k>gP</k> mappings</dd>
        </dl>
    </description>
</item>

<item>
    <tags>'awim' 'altwildmode'</tags>
    <spec>'altwildmode' 'awim'</spec>
    <type>&option.altwildmode.type;</type>
    <default>&option.altwildmode.default;</default>
    <description>
        <p>
            Like <o>wildmode</o>, but when the <k name="A-Tab" mode="c"/> key
            is pressed.
        </p>
    </description>
</item>

<item>
    <tags>'au' 'autocomplete'</tags>
    <spec>'autocomplete' 'au'</spec>
    <type>&option.autocomplete.type;</type>
    <default>&option.autocomplete.default;</default>
    <description>
        <p>
            Enables automatic completion for completion contexts (see
            <ex>:contexts</ex>) matching the given regular expressions. When
            automatic completion is enabled, the completion list is
            automatically opened when the &tag.command-line; is focused.
            Thereafter, any key press triggers a completion update for the
            matching contexts. Non-matching contexts will only be updated when
            the <k name="Tab" mode="c"/> key is pressed. This option is useful
            for disabling auto-completion for computationally intensive
            contexts that don't perform well when your system is under load.
        </p>

        <note>
            Completion contexts have names very much like Unix path names.
            These denote the tree in which they're called. A completer will
            never be called unless every completer preceding it in the tree
            was also called. For example, if your completer excludes
            <str>/ex/</str>, it will also exclude <str>/ex/bmarks</str>, and
            so on.
        </note>

        <example>
            To enable auto-completion for everything but <ex>:history</ex> or
            <ex>:bmarks</ex>, you would choose a value such as
            <str delim="">!/ex/(bmarks|history),.?</str>
        </example>

        <p>
            To go in the other direction, i.e. <em>only</em> enable
            auto-completion for those commands, you have to jump through
            some hoops, due to the way contexts work (see the note above):
            <str delim="">/ex/(bmarks|history),^(/|/ex/?)$</str>
        </p>
    </description>
</item>

<item>
    <tags>'bh' 'banghist'</tags>
    <spec>'banghist' 'bh'</spec>
    <type>&option.banghist.type;</type>
    <default>&option.banghist.default;</default>
    <description>
        <p>
            Replace occurrences of ! with the previous command when
            executing external commands.
        </p>
    </description>
</item>

<item>
    <tags>$CDPATH</tags>
    <tags>'cd' 'cdpath'</tags>
    <spec>'cdpath' 'cd'</spec>
    <type>&option.cdpath.type;</type>
    <default type="plain">equivalent to <str>.</str> or <str>.,$CDPATH</str></default>
    <description>
        <p>
            List of directories searched when executing the <ex>:cd</ex>
            command. This is only used for relative paths; if an absolute path is
            specified, this option is ignored.
        </p>
        <p>
            If the <em>CDPATH</em> environment variable is set this path list
            is appended to the default value of <str>.</str>.
        </p>
    </description>
</item>

<item>
    <tags>'ca' 'cookieaccept'</tags>
    <spec>'cookieaccept' 'ca'</spec>
    <type>&option.cookieaccept.type;</type>
    <default>&option.cookieaccept.default;</default>
    <description>
        <p>When to accept cookies.</p>

        <dl>
            <dt>all</dt>      <dd>Accept all cookies</dd>
            <dt>none</dt>     <dd>Accept no cookies</dd>
            <dt>samesite</dt> <dd>Accept all non-third-party cookies</dd>
        </dl>
    </description>
</item>

<item>
    <tags>'cl' 'cookielifetime'</tags>
    <spec>'cookielifetime' 'cl'</spec>
    <type>&option.cookielifetime.type;</type>
    <default>&option.cookielifetime.default;</default>
    <description>
        <p>
            The lifetime for which to accept cookies. The available
            options are:
        </p>
        <dl>
            <dt>default</dt>     <dd>The lifetime requested by the setter</dd>
            <dt>prompt</dt>      <dd>Always prompt for a lifetime</dd>
            <dt>session</dt>     <dd>The current session</dd>
            <dt><a>days</a></dt> <dd>When a number is given, it is
                interpreted as the number of days for which to keep
                cookies</dd>
        </dl>
    </description>
</item>

<item>
    <tags>'ck' 'cookies'</tags>
    <spec>'cookies' 'ck'</spec>
    <type>&option.cookies.type;</type>
    <default>&option.cookies.default;</default>
    <description>
        <p>The default action for the <ex>:cookies</ex> command.</p>
    </description>
</item>

<item>
    <tags>'cpt' 'complete'</tags>
    <spec>'complete' 'cpt'</spec>
    <type>&option.complete.type;</type>
    <default>&option.complete.default;</default>
    <description>
        <p>Items which are completed at the <ex>:open</ex> prompts. Available items:</p>

        <dl dt="width: 6.5em;">
            <dt>search</dt> <dd>Search engines and keyword URLs</dd>
            <dt>file</dt> <dd>Local files</dd>
            <dt>location</dt> <dd>&dactyl.host; location bar entries (bookmarks and history sorted in an intelligent way)</dd>
            <dt>bookmark</dt> <dd>Bookmarks</dd>
            <dt>history</dt> <dd>History</dd>
            <dt>suggestion</dt> <dd>Search engine suggestions</dd>
        </dl>

        <p>
            Additionally, native search providers can be added by prefixing
            their names with the string <str delim="'">native:</str>. These
            providers are often added by other add-ons and are occasionally
            useful.
        </p>

        <p>
            The order is important, such that <se opt="complete"><str delim="">bsf</str></se> will
            list bookmarks followed by matching quick searches and then
            matching files.
        </p>

        <note>
            For backward compatibility, this option currently accepts a single
            entry containing single-letter names for completers. This usage
            is deprecated and will be removed in the future.
        </note>

        <warning>
            Using <em>bookmark</em> and <em>history</em> can make completion very slow if
            there are many items.
        </warning>
    </description>
</item>

<item>
    <tags>'ds' 'defsearch'</tags>
    <spec>'defsearch' 'ds'</spec>
    <type>&option.defsearch.type;</type>
    <default>&option.defsearch.default;</default>
    <description>
        <p>
            Sets the default search engine. The default search engine is
            used by <ex>:open</ex> and related commands for arguments which
            include no search or bookmark keywords and can't otherwise be
            converted into URLs or existing file names.
        </p>

        <p>
            This means that with <o>defsearch</o> set to <str>youtube</str>,
            <ex>:open Tim Minchin</ex> behaves exactly as
            <ex>:open youtube Tim Minchin</ex>, so long as you don't have a
            search or bookmark keyword called ‘Tim’.
        </p>
    </description>
</item>

<item>
    <tags>'dls' 'dlsort' 'downloadsort'</tags>
    <spec>'downloadsort' 'dlsort' 'dls'</spec>
    <strut/>
    <type>&option.downloadsort.type;</type>
    <default>&option.downloadsort.default;</default>
    <description>
        <p>
            <ex>:downloads</ex> sort order, in order of precedence.
            Each element must be preceded by a <tt>+</tt> or
            <tt>-</tt>, indicating ascending or descending sorting,
            respectively. Valid sort orders are:
        </p>

        <dl>
            <dt>active</dt>   <dd>Whether download is active</dd>
            <dt>complete</dt> <dd>Percent complete</dd>
            <dt>date</dt>     <dd>Date and time the download began</dd>
            <dt>filename</dt> <dd>Target filename</dd>
            <dt>size</dt>     <dd>File size</dd>
            <dt>speed</dt>    <dd>Download speed</dd>
            <dt>time</dt>     <dd>Time remaining</dd>
            <dt>url</dt>      <dd>Source URL</dd>
        </dl>
    </description>
</item>

<item>
    <tags>'editor'</tags>
    <spec>'editor'</spec>
    <type>&option.editor.type;</type>
    <default>&option.editor.default;</default>
    <description>
        <p>
            Set the external text editor.
            This is the editor used by <k name="C-i" mode="I"/>, <k>gF</k>, and
            other commands which launch an external text editor.
        </p>

        <p>
            Accepts a <t>macro-string</t> with the following escapes available.
            Arguments containing escapes which are not relevant to a given call
            are automatically elided. All field splitting is done before format
            characters are processed.
        </p>

        <dl>
            <dt>&lt;file></dt>   <dd>The file to edit. Appended as the final argument if missing.</dd>
            <dt>&lt;line></dt>   <dd>The line number at which to position the cursor.</dd>
            <dt>&lt;column></dt> <dd>The column at which to position the cursor.</dd>
        </dl>

        <warning>
            &dactyl.appName; will not behave correctly if the editor forks its
            own process rather than blocking until editing is complete. Gvim
            invoked without the <em>-f</em> option is one such example.
        </warning>
    </description>
</item>

<item>
    <tags>'enc' 'encoding'</tags>
    <spec>'encoding' 'enc'</spec>
    <type>&option.encoding.type;</type>
    <default>&option.encoding.default;</default>
    <description>
        <p>
            Changes the character encoding of the current buffer. Valid only
            until a new page is loaded.
        </p>
    </description>
</item>

<item>
    <tags>'noeb' 'noerrorbells'</tags>
    <tags>'eb' 'errorbells'</tags>
    <spec>'errorbells' 'eb'</spec>
    <type>&option.errorbells.type;</type>
    <default>&option.errorbells.default;</default>
    <description>
        <p>
            Ring the bell when an error message is displayed. See also
            <o>visualbell</o>.
        </p>
    </description>
</item>

<item>
    <tags>'ei' 'eventignore'</tags>
    <spec>'eventignore' 'ei'</spec>
    <type>&option.eventignore.type;</type>
    <default>&option.eventignore.default;</default>
    <description>
        <p>
            A list of autocommand event names which should be ignored. If the
            list contains the value <str>all</str> then all events are
            ignored.
        </p>
    </description>
</item>

<item>
    <tags>'noex' 'noexrc'</tags>
    <tags>'ex' 'exrc'</tags>
    <spec>'exrc' 'ex'</spec>
    <type>&option.exrc.type;</type>
    <default>&option.exrc.default;</default>
    <description>
        <p>
            Allow reading of an RC file in the current directory. This file is
            sourced after the default <tt><t>&dactyl.name;rc</t></tt> file in your
            home directory.
        </p>
    </description>
</item>

<item>
    <tags>'eht' 'extendedhinttags'</tags>
    <spec>'extendedhinttags' 'eht'</spec>
    <strut/>
    <type>&option.extendedhinttags.type;</type>
    <default>[asOTvVWy]:':-moz-any-link',area[href],img[src],iframe[src],
          [A]:[id],a[name],
          [f]:body,
          [F]:body,code,div,html,p,pre,span,
          [iI]:img,
          [S]:button,'input:not([type=hidden])',select,textarea</default>
    <description>
        <p>
            Defines specialized CSS selectors or XPath expressions for arbitrary
            <t>extended-hints</t> modes. The syntax is the same as for
            <o>hinttags</o>. If no matches are found, the value of
            <o>hinttags</o> is used.
        </p>
    </description>
</item>

<item>
    <tags>'fenc' 'fileencoding'</tags>
    <spec>'fileencoding' 'fenc'</spec>
    <type>&option.fileencoding.type;</type>
    <default>&option.fileencoding.default;</default>
    <description>
        <p>
            Changes the character encoding that &dactyl.appName; uses to read
            and write files.
        </p>
    </description>
</item>

<item>
    <tags>'fc' 'findcase'</tags>
    <spec>'findcase' 'fc'</spec>
    <type>&option.findcase.type;</type>
    <default>&option.findcase.default;</default>
    <description>
        <p>Find case matching mode.</p>

        <dl>
            <dt>ignore</dt> <dd>Case is never significant</dd>
            <dt>match</dt> <dd>Case is always significant</dd>
            <dt>smart</dt> <dd>Case is significant when capital letters are typed</dd>
        </dl>
    </description>
</item>

<item>
    <tags>'ff' 'findflags'</tags>
    <spec>'findflags' 'ff'</spec>
    <type>&option.findflags.type;</type>
    <default>&option.findflags.default;</default>
    <description>
        <p>Default flags for find invocations.</p>

        <dl>
            <dt>C</dt> <dd>Match case</dd>
            <dt>L</dt> <dd>Search all text</dd>
            <dt>R</dt> <dd>Perform a plain string search</dd>
            <dt>c</dt> <dd>Ignore case</dd>
            <dt>l</dt> <dd>Search only in links</dd>
            <dt>r</dt> <dd>Perform a regular expression search</dd>
        </dl>
    </description>
</item>

<item>
    <tags>'fh' 'followhints'</tags>
    <spec>'followhints' 'fh'</spec>
    <type>&option.followhints.type;</type>
    <default>&option.followhints.default;</default>
    <description>
        <p>
            Define the conditions under which hints selected by typing the link
            substring are followed. Hints selected by typing their label (as
            specified by <o>hintkeys</o>) are always followed immediately.
        </p>

        <p>Possible values:</p>

        <dl dt="width: 6em;">
            <dt>0</dt>      <dd>Follow the first hint as soon as typed text uniquely identifies it.</dd>
            <dt>1</dt>      <dd>Follow the selected hint on <k name="CR" link="false"/>.</dd>
        </dl>
    </description>
</item>

<item>
    <tags>'nofs' 'nofullscreen'</tags>
    <tags>'fs' 'fullscreen'</tags>
    <spec>'fullscreen' 'fs'</spec>
    <type>&option.fullscreen.type;</type>
    <default>&option.fullscreen.default;</default>
    <description>
        <p>
            Show the current window full-screen. Also hide certain GUI elements, such as
            <t>status-line</t> and tab bar.
        </p>
    </description>
</item>

<item>
    <tags>'go' 'guioptions'</tags>
    <spec>'guioptions' 'go'</spec>
    <type>&option.guioptions.type;</type>
    <default>&option.guioptions.default;</default>
    <description>
        <p>Show or hide certain GUI elements.</p>

        <p>Supported characters:</p>

        <dl dt="width: 6em;">
            <dt>B</dt>      <dd>Bookmark bar</dd>
            <dt>C</dt>      <dd>Always show the command line outside of the status line</dd>
            <dt>M</dt>      <dd>Always show messages outside of the status line</dd>
            <dt>N</dt>      <dd>Tab number over image</dd>
            <dt>T</dt>      <dd>Toolbar</dd>
            <dt>b</dt>      <dd>Bottom scrollbar</dd>
            <dt>c</dt>      <dd>Always show the command line, even when empty</dd>
            <dt>l</dt>      <dd>Left scrollbar (<em>l</em> and <em>r</em> are mutually exclusive)</dd>
            <dt>m</dt>      <dd>Menu bar</dd>
            <dt>n</dt>      <dd>Tab number</dd>
            <dt>r</dt>      <dd>Right scrollbar</dd>
            <dt>s</dt>      <dd>Status bar</dd>
        </dl>

        <p>See also <o>showtabline</o>.</p>

        <note>Scrollbar changes require a page reload to take effect.</note>
        <note>Only one of <em>l</em> or <em>r</em> may be included.</note>
    </description>
</item>

<item>
    <tags>'hf' 'helpfile'</tags>
    <spec>'helpfile' 'hf'</spec>
    <type>&option.helpfile.type;</type>
    <default>&option.helpfile.default;</default>
    <description>
        <p>
            Name of the main help file. This is that page shown if the
            <ex>:help</ex> command is called without any arguments.
        </p>
    </description>
</item>

<item>
    <tags>'hin' 'hintinputs'</tags>
    <spec>'hintinputs' 'hin'</spec>
    <type>&option.hintinputs.type;</type>
    <default>&option.hintinputs.default;</default>
    <description>
        <p>
            When generating hints for input elements that do not have an
            explicit caption, this specifies the methods used to generate a
            textual hint. The options are attempted in the order they are
            given, and the first successful value is used.
        </p>

        <dl dt="width: 8em;">
            <dt>value</dt>      <dd>The hint is the value displayed in a text input, or the selected option for a drop-down.</dd>
            <dt>label</dt>      <dd>The value of an explicit label for the input; this will not match most manually added labels that are found on sites.</dd>
            <dt>name </dt>      <dd>The name of the input will be used; although the name is not designed for user consumption, it is frequently very similar to the label.</dd>
        </dl>
    </description>
</item>

<item>
    <tags>'hk' 'hintkeys'</tags>
    <spec>'hintkeys' 'hk'</spec>
    <type>&option.hintkeys.type;</type>
    <default>&option.hintkeys.default;</default>
    <description>
        <p>
            The keys used to label and select hints. With its default value,
            each hint has a unique number which can be typed to select it,
            while all other characters are used to filter hints based on their
            text. With a value such as <str>asdfg;lkjh</str>, each hint is
            ‘numbered’ based on the characters of the home row.
        </p>
    </description>
</item>

<item>
    <tags>'hm' 'hintmatching'</tags>
    <spec>'hintmatching' 'hm'</spec>
    <type>&option.hintmatching.type;</type>
    <default>&option.hintmatching.default;</default>
    <description>
        <p>Change the hint matching algorithm used in Hints mode.</p>

        <p>Possible values:</p>

        <dl>
            <dt>contains</dt>
            <dd>
                The typed characters are split on whitespace, and
                these character groups have to match anywhere inside
                the text of the link.
            </dd>
            <dt>wordstartswith</dt>
            <dd>
                The typed characters are matched with the beginning
                of the first word (see <o>wordseparators</o>) in the
                link as long as possible. If no matches occur in the
                current word, then the matching is continued at the
                beginning of the next word. The words are worked
                through in the order they appear in the link. If the
                typed characters contain spaces, then the characters
                are split on whitespace. These character groups are
                then matched with the beginning of the words,
                beginning at the first one and continuing with the
                following words in the order they appear in the
                link.
            </dd>
            <dt>firstletters</dt>
            <dd>
                Behaves like wordstartswith, but non-matching words
                aren't skipped.
            </dd>
            <dt>custom</dt>
            <dd>
                Delegate to the function
                <tt>dactyl.plugins.customHintMatcher</tt>.
            </dd>
            <dt>transliterated</dt>
            <dd>
                Certain alphanumeric characters are transliterated into their
                unaccented equivalents, such that ‘euro’ will match 'æuró',
                and ‘Ångström’ will match ‘angstrom’.
            </dd>
        </dl>
    </description>
</item>

<item>
    <tags>'ht' 'hinttags'</tags>
    <strut/>
    <spec>'hinttags' 'ht'</spec>
    <type>&option.hinttags.type;</type>
    <default>:-moz-any-link,area,button,iframe,input:not([type=hidden]),
          label[for],select,textarea,
          [onclick],[onmouseover],[onmousedown],[onmouseup],[oncommand],
          [tabindex],[role=link],[role=button],[contenteditable=true]</default>
    <description>
        <p>
            A list of CSS selectors or XPath expressions used to select elements
            for <link topic="hints">hinting</link>. Values beginning with the
            string <str>xpath:</str> are treated as XPath expressions, while any
            other values are treated as CSS selectors. Can be overridden for
            individual <t>extended-hints</t> modes with the
            <o>extendedhinttags</o> option.
        </p>
    </description>
</item>

<item>
    <tags>'hto' 'hinttimeout'</tags>
    <spec>'hinttimeout' 'hto'</spec>
    <type>&option.hinttimeout.type;</type>
    <default>&option.hinttimeout.default;</default>
    <description>
        <p>
            Timeout in milliseconds before automatically following a non-unique
            hint. The timeout is measured since the last time a key listed in
            <o>hintkeys</o> was pressed. It has no effect when narrowing hints
            by typing part of their text. Set to 0 (the default) to only follow
            hints after pressing <k name="CR" link="false"/> or when the hint is unique.
        </p>
    </description>
</item>

<item>
    <tags>'hi' 'history'</tags>
    <spec>'history' 'hi'</spec>
    <type>&option.history.type;</type>
    <default>&option.history.default;</default>
    <description>
        <p>
            Maximum number of Ex commands and find patterns to store in the
            <t>command-line</t> history.
        </p>
    </description>
</item>

<item>
    <tags>'nohlf' 'nohlfind'</tags>
    <tags>'hlf' 'hlfind'</tags>
    <spec>'hlfind' 'hlf'</spec>
    <type>&option.hlfind.type;</type>
    <default>&option.hlfind.default;</default>
    <description>
        <p>Highlight previous find pattern matches.</p>
    </description>
</item>

<item>
    <tags>'noif' 'noincfind'</tags>
    <tags>'if' 'incfind'</tags>
    <spec>'incfind' 'if'</spec>
    <type>&option.incfind.type;</type>
    <default>&option.incfind.default;</default>
    <description>
        <p>Show the first match for a find pattern as it is typed.</p>
    </description>
</item>

<item>
    <tags>'noim' 'noinsertmode'</tags>
    <tags>'im' 'insertmode'</tags>
    <spec>'insertmode' 'im'</spec>
    <type>&option.insertmode.type;</type>
    <default>&option.insertmode.default;</default>
    <description>
        <p>
            Use Insert mode as the default for text areas. This is useful if you
            want to use the known &dactyl.host; interface for editing text areas.
            Input fields default to this behavior irrespective of this option's
            setting.
        </p>

        <p>
            Text Edit mode can be entered with <k name="C-t" mode="I"/> from Insert mode.
        </p>
    </description>
</item>

<item>
    <tags>'isk' 'iskeyword'</tags>
    <spec>'iskeyword' 'isk'</spec>
    <type>&option.iskeyword.type;</type>
    <default>&option.iskeyword.default;</default>
    <description>
        <p>Regular expression defining which characters constitute words.</p>
    </description>
</item>

<item>
    <tags>'nojsd' 'nojsdebugger'</tags>
    <tags>'jsd' 'jsdebugger'</tags>
    <spec>'jsdebugger' 'jsd'</spec>
    <type>&option.jsdebugger.type;</type>
    <default>&option.jsdebugger.default;</default>
    <description>
        <p>
            Use the JavaScript debugger service for JavaScript completion.
        </p>
    </description>
</item>

<item>
    <tags>'jt' 'jumptags'</tags>
    <spec>'jumptags' 'jt'</spec>
    <type>&option.jumptags.type;</type>
    <default>&option.jumptags.default;</default>
    <description>
        <p>XPath or CSS selector strings of jumpable elements for extended hint modes.</p>
    </description>
</item>

<item>
    <tags>'ln' 'linenumbers'</tags>
    <spec>'linenumbers' 'ln'</spec>
    <type>&option.linenumbers.type;</type>
    <default><![CDATA['view-source:*':[id^=line],
          code.google.com:'#nums [id^="nums_table"] a[href^="#"]',
          github.com:.line_numbers>*,
          mxr.mozilla.org:a.l,
          pastebin.com:#code_frame>div>ol>li,
          addons.mozilla.org:.gutter>.line>a,
          bugzilla.mozilla.org:.bz_comment:not(.bz_first_comment):not(.ih_history),
          *:'/* Hgweb/Gitweb */ .completecodeline a.codeline, a.linenr']]></default>
    <description>
        <p>
            Patterns used to determine line numbers used by <k>G</k>. May be
            either a selector expression as accepted by <o>hinttags</o>, or the
            string <str delim="'">func:</str> followed by a JavaScript
            expression which evaluates to a function. In the former case, the
            first matching element whose text content is equal to the desired
            line number is used. If no such element exists, the <oa>count</oa>th
            matching element is used. In the latter case, the provided function
            must accept two arguments, the document in question and the desired
            line number, and must return the element corresponding to the given
            line.
        </p>
    </description>
</item>


<item>
    <tags>'lpl' 'loadplugins'</tags>
    <spec>'loadplugins' 'lpl'</spec>
    <type>&option.loadplugins.type;</type>
    <default>&option.loadplugins.default;</default>
    <description>
        <p>
            A regular expression list that defines which plugins are loaded at
            startup or via <ex>:loadplugins</ex>. The first item to match is
            the one that takes effect. If no items match, the file is not
            loaded. Setting this to a blank value effectively disables plugin
            loading.
        </p>
        <p>
            For example, to prepend to the default value of this option to load
            all plugins except for <em>foobar-plugin</em>, you could use:
        </p>
        <set opt="loadplugins" op="^=">!<str delim="'">foobar-plugin</str></set>
        <p>
            Alternatively, you can specify which plugins to load and which to
            omit in your <tt><t>&dactyl.name;rc</t></tt> using something like
            the following:
        </p>
        <set opt="loadplugins">!<str delim="'">foo|bar</str>,<str delim="'">\.(js|&dactyl.fileExt;)$</str></set>
        <p>
            That will load all plugins but <em>foo</em> and <em>bar</em>.
        </p>
        <p>
            Note that in the first expression of the latter example you don't
            need parentheses, as the <em>!</em> negates the whole of the
            following expression (cf. <t>regexplist</t>).
        </p>
        <p>
            See also <ex>:runtime</ex>.
        </p>
    </description>
</item>

<item>
    <tags>'maxitems'</tags>
    <spec>'maxitems'</spec>
    <type>&option.maxitems.type;</type>
    <default>&option.maxitems.default;</default>
    <description>
        <p>Maximum number of items to display at once in a listing.</p>
    </description>
</item>

<item>
    <tags>'msgs' 'messages'</tags>
    <spec>'messages' 'msgs'</spec>
    <type>&option.messages.type;</type>
    <default>&option.messages.default;</default>
    <description>
        <p>Maximum number of messages to store in the message history.</p>
    </description>
</item>

<item>
    <tags>'nomore' 'more'</tags>
    <spec>'more'</spec>
    <type>&option.more.type;</type>
    <default>&option.more.default;</default>
    <description>
        <p>
            Pause the message list window when more than one screen of
            listings is displayed.
        </p>
    </description>
</item>

<item>
    <tags>'newtab'</tags>
    <spec>'newtab'</spec>
    <type>&option.newtab.type;</type>
    <default>&option.newtab.default;</default>
    <description>
        <p>
            Defines which Ex commands open pages in new tabs rather than the
            current tab by default. This may be overridden with the
            <ex>:tab</ex> command, and is usually inverted by affixing a
            <em>!</em> to the command in question.
        </p>

        <p>Possible values:</p>

        <dl>
            <dt>all</dt>            <dd>All commands</dd>
            <dt>addons</dt>         <dd><ex>:addo<oa>ns</oa></ex> command</dd>
            <dt>downloads</dt>      <dd><ex>:downl<oa>oads</oa></ex> command</dd>
            <dt>extoptions</dt>     <dd><ex>:exto<oa>ptions</oa></ex> command</dd>
            <dt>help</dt>           <dd><ex>:h<oa>elp</oa></ex> command</dd>
            <dt>javascript</dt>     <dd><ex>:javascript!</ex> or <ex>:js!</ex> command</dd>
            <dt>prefs</dt>          <dd><ex>:pref<oa>erences</oa>!</ex> or <ex>:prefs!</ex> command</dd>
        </dl>

    </description>
</item>

<item>
    <tags>'nextpattern'</tags>
    <strut/>
    <spec>'nextpattern'</spec>
    <type>&option.nextpattern.type;</type>
    <default>&option.nextpattern.default;</default>
    <description>
        <p>
            Patterns to use when guessing the next page in a document
            sequence after pressing the <k>]]</k> key. Each pattern is
            successively tested against each link in the page (as defined by
            <o>hinttags</o>, starting with the last), and the first link to
            match is followed.
        </p>
    </description>
</item>

<item>
    <tags>'noonline' 'online'</tags>
    <spec>'online'</spec>
    <type>&option.online.type;</type>
    <default>&option.online.default;</default>
    <description>
        <p>
            Enables or disables ‘offline’ mode, where network access is
            disabled and all web pages are loaded entirely from cache.
        </p>
    </description>
</item>

<item>
    <tags>'pa' 'pageinfo'</tags>
    <spec>'pageinfo' 'pa'</spec>
    <type>&option.pageinfo.type;</type>
    <default>&option.pageinfo.default;</default>
    <description>
        <p>Info shown in the <ex>:pageinfo</ex> output.</p>

        <p>Items available by default:</p>

        <dl dt="width: 6em;">
            <dt>g</dt>      <dd>General info</dd>
            <dt>e</dt>      <dd>Search Engines</dd>
            <dt>f</dt>      <dd>Feeds</dd>
            <dt>m</dt>      <dd>Meta tags</dd>
            <dt>s</dt>      <dd>Security information</dd>
        </dl>

        <p>
            The order of the options defines the order in which they appear in
            the result.
        </p>
    </description>
</item>

<item>
    <tags>'pk' 'passkeys'</tags>
    <spec>'passkeys' 'pk'</spec>
    <type>&option.passkeys.type;</type>
    <default>&option.passkeys.default;</default>
    <description>
        <p>
            Pass certain keys through directly for the given URLs.
            For any page with a URL matching a given <t>site-filter</t>, all key
            events for keys listed in the corresponding value are passed
            through directly to &dactyl.host;, and are not processed
            by &dactyl.appName; in any way. Key names are separated
            by commas, where the first key name is treated as a list
            of individual keys and each subsequent key is treated as
            a key chain. Individual key entries always apply to all
            modes. Key chains apply only to non-input modes unless
            they begin with a key requiring a modifier other than
            shift.
        </p>

        <example><set opt="passkeys" op="+="><str delim="">mail.google.com</str>:<str delim="">jk&lt;CR></str>,<str delim="">gi</str></set></example>

        <p>
            More subtle and complex pass through can be achieved
            using <t>groups</t> and mode-specific mappings utilizing
            the <k name="Pass"/> pseudo-key.
        </p>
    </description>
</item>

<item>
    <tags>'pu' 'passunknown'</tags>
    <spec>'passunknown' 'pu'</spec>
    <type>&option.passunknown.type;</type>
    <default>&option.passunknown.default;</default>
    <description>
        <p>
            Pass unknown keys through to &dactyl.host; in these
            <t>modes</t>. The first element matching a currently
            active mode is the one that takes effect. Modes may be
            negated by prefixing them with a <tt>!</tt>.
        </p>
    </description>
</item>

<item>
    <tags>'pps' 'popups'</tags>
    <spec>'popups' 'pps'</spec>
    <type>&option.popups.type;</type>
    <default>&option.popups.default;</default>
    <description>
        <p>
            Defines where to show requested pop-up windows. Applies only to
            links which request to open in a new window. The behavior of
            middle-, shift-, or control- clicking a link is unaffected by this
            option.
        </p>

        <p>Possible values are:</p>

        <dl dt="width: 8em;">
            <dt>tab</dt>            <dd>Open pop-ups in a new tab</dd>
            <dt>window</dt>         <dd>Open pop-ups in a new window</dd>
            <dt>resized</dt>        <dd>Open resized pop-ups in a new window</dd>
        </dl>

        <p>
            If neither <em>tab</em> nor <em>window</em> is provided, all
            pop-ups open in the current tab. <em>tab</em> and <em>window</em>
            are mutually exclusive, and the last one listed is effective.
        </p>

        <note>
            This option does not alter the &dactyl.host; pop-up blocker behavior
            in any way.
        </note>
    </description>
</item>

<item>
    <tags>'previouspattern'</tags>
    <strut/>
    <spec>'previouspattern'</spec>
    <type>&option.previouspattern.type;</type>
    <default>&option.previouspattern.default;</default>
    <description>
        <p>
            Patterns to use when guessing the previous page in a document
            sequence after pressing the <k>[[</k> key. Each pattern is
            successively tested against each link in the page (as defined by
            <o>hinttags</o>, starting with the last), and the first link to
            match is followed.
        </p>
    </description>
</item>

<item>
    <tags>'noprivate' 'private'</tags>
    <spec>'private'</spec>
    <type>&option.private.type;</type>
    <default>&option.private.default;</default>
    <description>
        <p>
            Set the <str>private browsing</str> option. In private browsing mode
            history, cache files, cookies, form data, passwords, download list
            entries, local and URL <t>marks</t>, <t>command-line</t> history
            and macros are available only for the duration of the private
            browsing session and deleted when returning to normal browsing
            mode. See also <t>privacy</t>.
        </p>
    </description>
</item>

<item>
    <tags>$&dactyl.idName;_RUNTIME</tags>
    <tags>'rtp' 'runtimepath'</tags>
    <spec>'runtimepath' 'rtp'</spec>
    <type>&option.runtimepath.type;</type>
    <default type="plain"><str>$&dactyl.idName;_RUNTIME</str> or
       Unix, Mac: <str>~/.&dactyl.name;</str>
         Windows: <str>~/&dactyl.name;</str></default>
    <description>
        <p>List of directories searched for runtime files:</p>

        <ul>
            <li>colors/</li>
            <li>plugins/</li>
        </ul>

        <p>Example:</p>

        <set opt="runtimepath"><str delim="">~/my&dactyl.name;</str>,<str delim="">~/.&dactyl.name;</str></set>

        <p>
            This will search for plugins in both
            <str>~/my&dactyl.name;/plugins</str> and
            <str>~/.&dactyl.name;/plugins</str>
        </p>

        <p>
            On startup, if the environment variable <em>$&dactyl.idName;_RUNTIME</em> does not
            exist, &dactyl.appName; will set it to match this value.
        </p>
    </description>
</item>

<item>
    <tags>'si' 'sanitizeitems'</tags>
    <spec>'sanitizeitems' 'si'</spec>
    <strut/>
    <type>&option.sanitizeitems.type;</type>
    <default>&option.sanitizeitems.default;</default>
    <description>
        <p>
            The default list of private items to sanitize. See
            <ex>:sanitize</ex> for a list and explanation of possible values. A
            value of <str>all</str> will cause all items to be sanitized. Items
            may be excluded by prefixing them with a <tt>!</tt>. The first
            matching item takes precedence.
        </p>
    </description>
</item>

<item>
    <tags>'ss' 'sanitizeshutdown'</tags>
    <spec>'sanitizeshutdown' 'ss'</spec>
    <type>&option.sanitizeshutdown.type;</type>
    <default>&option.sanitizeshutdown.default;</default>
    <description>
        <p>The items to sanitize automatically at shutdown.</p>
    </description>
</item>

<item>
    <tags>'sts' 'sanitizetimespan'</tags>
    <spec>'sanitizetimespan' 'sts'</spec>
    <strut/>
    <type>&option.sanitizetimespan.type;</type>
    <default>&option.sanitizetimespan.default;</default>
    <description>
        <p>
            The default sanitizer time span. Only items created within this timespan are
            deleted. The value must be of the one of:
        </p>

        <dl dt="width: 8em;">
            <dt>all</dt>       <dd>Everything</dd>
            <dt>session</dt>   <dd>The current session</dd>
            <dt><a>n</a>m</dt> <dd>Past <a>n</a> Minutes</dd>
            <dt><a>n</a>h</dt> <dd>Past <a>n</a> Hours</dd>
            <dt><a>n</a>d</dt> <dd>Past <a>n</a> Days</dd>
            <dt><a>n</a>w</dt> <dd>Past <a>n</a> Weeks</dd>
        </dl>
    </description>
</item>

<item>
    <tags>'scr' 'scroll'</tags>
    <spec>'scroll' 'scr'</spec>
    <type>&option.scroll.type;</type>
    <default>&option.scroll.default;</default>
    <description>
        <p>
            Number of lines to scroll with <k name="C-u"/> and <k name="C-d"/>
            commands. The number of lines scrolled defaults to half the window
            size. When a <oa>count</oa> is specified to the <k name="C-u"/> or
            <k name="C-d"/> commands, set this option to <oa>count</oa> before
            executing the command. Setting this to <em>0</em> restores the
            default behaviour.
        </p>
    </description>
</item>

<item>
    <tags>'scs' 'scrollsteps'</tags>
    <spec>'scrollsteps' 'scs'</spec>
    <type>&option.scrollsteps.type;</type>
    <default>&option.scrollsteps.default;</default>
    <description>
        <p>
            The number of steps in which to smooth scroll to a new position. If
            set to 1, smooth scrolling is not used.
        </p>
    </description>
</item>

<item>
    <tags>'sct' 'scrolltime'</tags>
    <spec>'scrolltime' 'sct'</spec>
    <type>&option.scrolltime.type;</type>
    <default>&option.scrolltime.default;</default>
    <description>
        <p>The time, in milliseconds, in which to smooth scroll to a new position.</p>
    </description>
    </item>

<item>
    <tags>'sh' 'shell'</tags>
    <spec>'shell' 'sh'</spec>
    <type>&option.shell.type;</type>
    <default type="plain"><em>$SHELL</em> or <str>sh</str>, Windows: <str>cmd.exe</str></default>
    <description>
        <p>Shell to use for executing <ex>:!</ex> and <ex>:run</ex> commands.</p>
    </description>
</item>

<item>
    <tags>'shcf' 'shellcmdflag'</tags>
    <spec>'shellcmdflag' 'shcf'</spec>
    <strut/>
    <type>&option.shellcmdflag.type;</type>
    <default type="plain"><str>-c</str>, Windows: <str>/c</str></default>
    <description>
        <p>Flag passed to shell when executing <ex>:!</ex> and <ex>:run</ex> commands.</p>
    </description>
</item>

<item>
    <tags>'smd' 'showmode'</tags>
    <spec>'showmode' 'smd'</spec>
    <type>&option.showmode.type;</type>
    <default>&option.showmode.default;</default>
    <description>
        <p>
            Show the current mode in the command line if it or any
            of its parent <t>modes</t> is included in the list.
            Modes may be negated by prefixing them with a
            <tt>!</tt>.
        </p>
    </description>
</item>

<item>
    <tags>'ssli' 'showstatuslinks'</tags>
    <spec>'showstatuslinks' 'ssli'</spec>
    <strut/>
    <type>&option.showstatuslinks.type;</type>
    <default>&option.showstatuslinks.default;</default>
    <description>
        <p>
            When the mouse hovers over a link, or a link is otherwise focused,
            show its destination in the status bar.
        </p>

        <p>Possible values are:</p>

        <dl>
            <dt></dt> <dd>Don't show link destination</dd>
            <dt>status</dt> <dd>Show the link destination in the &tag.status-line;</dd>
            <dt>command</dt> <dd>Show the link destination in the &tag.command-line;</dd>
        </dl>
    </description>
</item>

<item>
    <tags>'stal' 'showtabline'</tags>
    <spec>'showtabline' 'stal'</spec>
    <type>&option.showtabline.type;</type>
    <default>&option.showtabline.default;</default>
    <description>
        <p>Define when the tab bar is visible.</p>

        <dl>
            <dt>always</dt>   <dd>Always show the tab bar</dd>
            <dt>multitab</dt> <dd>Show the tab bar when there are multiple tabs</dd>
            <dt>never</dt>    <dd>Never show the tab bar</dd>
        </dl>
    </description>
</item>

<item>
    <tags>'spl' 'spelllang'</tags>
    <spec>'spelllang' 'spl'</spec>
    <type>&option.spelllang.type;</type>
    <default>&option.spelllang.default;</default>
    <description short="true">
        <p>The language used by the spell checker.</p>
    </description>
</item>

<item>
    <tags>'sf' 'strictfocus'</tags>
    <spec>'strictfocus' 'sf'</spec>
    <type>&option.strictfocus.type;</type>
    <default>&option.strictfocus.default;</default>
    <description>
        <p>
            Prevent scripts from focusing input elements without user intervention.
        </p>

        <p>Possible values:</p>

        <dl>
            <dt>despotic</dt>      <dd>Only allow focus changes when explicitly requested by the user</dd>
            <dt>laissez-faire</dt> <dd>Always allow focus changes</dd>
            <dt>moderate</dt>      <dd>Allow focus changes after user-initiated focus change</dd>
        </dl>
    </description>
</item>

<item>
    <tags>'suggestengines'</tags>
    <spec>'suggestengines'</spec>
    <type>&option.suggestengines.type;</type>
    <default>&option.suggestengines.default;</default>
    <description>
        <p>
            Set the search engines which can be used for completion
            suggestions when <o>complete</o> contains <em>S</em>.
        </p>
    </description>
</item>

<item>
    <tags>'notmo' 'notimeout'</tags>
    <tags>'tmo' 'timeout'</tags>
    <spec>'timeout' 'tmo'</spec>
    <type>&option.timeout.type;</type>
    <default>&option.timeout.default;</default>
    <description>
        <p>
            When this option is set and a key sequence interpretable both as a
            complete command and as a start of a longer command is typed,
            execute the shorter command after <o>timeoutlen</o> milliseconds.
        </p>
    </description>
</item>

<item>
    <tags>'tmol' 'timeoutlen'</tags>
    <spec>'timeoutlen' 'tmol'</spec>
    <type>&option.timeoutlen.type;</type>
    <default>&option.timeoutlen.default;</default>
    <description>
        <p>
            Maximum number of milliseconds to wait for a longer key command
            when a shorter one exists. Only effective when <o>timeout</o> is
            set.
        </p>
    </description>
</item>

<item>
    <tags>'titlestring'</tags>
    <spec>'titlestring'</spec>
    <type>&option.titlestring.type;</type>
    <default>&option.titlestring.default;</default>
    <description>
        <p>
            Set the application name shown after the current page title in
            &dactyl.host;'s title bar.
        </p>
        <example><set opt="titlestring"><str>Mozilla &dactyl.host;</str></set></example>
    </description>
</item>

<item>
    <tags>'us' 'urlsep' 'urlseparator'</tags>
    <spec>'urlseparator' 'urlsep' 'us'</spec>
    <type>&option.urlseparator.type;</type>
    <default>&option.urlseparator.default;</default>
    <description>
        <p>
            The regular expression used to split URL lists in commands
            like <ex>:open</ex>. When set to the empty string, URL lists
            are never split. With the default settings, the following will open
            three URLs (the first one in the current tab and the latter two in
            two new background tabs):
        </p>
        <code><ex>:open <str delim="">google Linux</str> | <str delim="">wikipedia Arch Linux</str> | <str delim="">imdb Serenity</str></ex></code>
    </description>
</item>

<item>
    <tags>'noum' 'nousermode'</tags>
    <tags>'um' 'usermode'</tags>
    <spec>'usermode' 'um'</spec>
    <type>&option.usermode.type;</type>
    <default>&option.usermode.default;</default>
    <description>
        <p>Show current website with minimal styling.</p>
    </description>
</item>

<item>
    <tags>'vbs' 'verbose'</tags>
    <spec>'verbose' 'vbs'</spec>
    <type>&option.verbose.type;</type>
    <default>&option.verbose.default;</default>
    <description>
        <p>
            Define which info messages are displayed. As the value increases,
            &dactyl.appName; will show more messages about its progress.
            These can be viewed at any time with the <ex>:messages</ex>
            command. The highest useful value is 15, being the most verbose
            mode.
        </p>
        <!-- TODO: list levels and associated messages -->
    </description>
</item>

<item>
    <tags>'novb' 'novisualbell'</tags>
    <tags>'vb' 'visualbell'</tags>
    <spec>'visualbell' 'vb'</spec>
    <type>&option.visualbell.type;</type>
    <default>&option.visualbell.default;</default>
    <description>
        <p>
            Use visual bell instead of beeping on errors. The visual bell
            style is controlled by <ex>:highlight Bell</ex>. See also
            <o>errorbells</o>.
        </p>
    </description>
</item>

<item>
    <tags>'wia' 'wildanchor'</tags>
    <strut/>
    <spec>'wildanchor' 'wia'</spec>
    <type>&option.wildanchor.type;</type>
    <default>&option.wildanchor.default;</default>
    <description>
        <p>
            Regular expression list defining which completion groups show only
            matches anchored to the beginning of the result. The first
            matching expression is the one that applies. If the match is
            negated, then the current filter may match anywhere in the result.
            If it is not negated, then the match may only occur at the
            beginning of the result. If no items match, then a
            context-dependent default value is used.
        </p>
    </description>
</item>

<item>
    <tags>'wic' 'wildcase'</tags>
    <spec>'wildcase' 'wic'</spec>
    <type>&option.wildcase.type;</type>
    <default>&option.wildcase.default;</default>
    <description>
        <p>
            Defines how completions are matched with regard to character case.
            Keys in the <t>regexpmap</t> refer to completion context names (see
            <ex>:contexts</ex>) for which the value applies. Possible values
            are:
        </p>

        <dl>
            <dt><str>smart</str></dt>  <dd>Case is significant when capital letters are typed</dd>
            <dt><str>match</str></dt>  <dd>Case is always significant</dd>
            <dt><str>ignore</str></dt> <dd>Case is never significant</dd>
        </dl>
    </description>
</item>

<item>
    <tags>'wig' 'wildignore'</tags>
    <spec>'wildignore' 'wig'</spec>
    <type>&option.wildignore.type;</type>
    <default>&option.wildignore.default;</default>
    <description>
        <p>
            List of path name patterns to ignore when completing files and
            directories. For example, the following will ignore object files
            and Vim swap files:
        </p>

        <set opt="wildignore"><str delim="'">\.o$</str>,<str delim="'">^\..*\.s[a-z]{2}$</str></set>

        <note>Unlike Vim, each pattern is a regular expression rather than a glob.</note>
    </description>
</item>

<item>
    <tags>'wim' 'wildmode'</tags>
    <spec>'wildmode' 'wim'</spec>
    <type>&option.wildmode.type;</type>
    <default>&option.wildmode.default;</default>
    <description>
        <p>
            Defines how command-line completion works. It is a comma-separated
            list of parts, where each part specifies what to do for each
            consecutive press of the <k name="Tab" mode="c"/> key. The last
            element in the list is used for each succeeding <k name="Tab" mode="c"/>
            after it has been reached.
        </p>

        <p>These are the possible values for each part:</p>

        <dl>
            <dt><str></str></dt>             <dd>Complete only the first match.</dd>
            <dt><str>full</str></dt>         <dd>Complete the next full match. After the last, the original string is used.</dd>
            <dt><str>longest</str></dt>      <dd>Complete the longest common substring of all completions.</dd>
            <dt><str>list</str></dt>         <dd>When more than one match, list all matches.</dd>
            <dt><str>list:full</str></dt>    <dd>When more than one match, list all matches and complete the first match.</dd>
            <dt><str>list:longest</str></dt>
            <dd>
                When more than one match, list all matches and
                complete till the longest common string. When there
                is only a single match, it is fully completed
                regardless of the case.
            </dd>
        </dl>

        <p>
            See also <o>altwildmode</o>.
        </p>

    </description>
</item>

<item>
    <tags>'wis' 'wildsort'</tags>
    <spec>'wildsort' 'wis'</spec>
    <type>&option.wildsort.type;</type>
    <default>&option.wildsort.default;</default>
    <description>
        <p>
            A list of regular expressions defining which completion contexts
            should be sorted. The main purpose of this option is to prevent
            sorting of certain completion lists that don't perform well under
            load.
        </p>

        <p>See also <ex>:contexts</ex>.</p>
    </description>
</item>

<item>
    <tags>'wsp' 'wordseparators'</tags>
    <spec>'wordseparators' 'wsp'</spec>
    <strut/>
    <type>&option.wordseparators.type;</type>
    <default>&option.wordseparators.default;</default>
    <description>
        <p>
            A regular expression which defines how words are split for
            the <o>hintmatching</o> types <str>wordstartswith</str> and
            <str>firstletters</str>. Words are split on each occurrence of the
            given pattern.
        </p>
    </description>
</item>

<item>
    <tags>'ys' 'yankshort'</tags>
    <spec>'yankshort' 'ys'</spec>
    <type>&option.yankshort.type;</type>
    <default>&option.yankshort.default;</default>
    <description>
        <p>Yank the canonical short URL of a web page where provided.</p>
    </description>
</item>


</document>

<!-- vim:se sts=4 sw=4 et: -->
